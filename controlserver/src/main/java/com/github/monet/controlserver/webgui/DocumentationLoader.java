/**
 *
 */
package com.github.monet.controlserver.webgui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.pegdown.PegDownProcessor;

/**
 * This class provides facilities to generate markup code from markup files.
 * <p>
 * For this class to work, it must be initialized with a valid directory All
 * files with an <b>.md</b> suffix are loaded from the given directory and put
 * in convenient wrapper classes. The files are sorted by their filename and the
 * first two characters are removed for the sidebar titles. So your default page
 * should be named like <tt>'00Overview.md'</tt> and so on.
 */
public class DocumentationLoader implements Serializable {

	/**
	 *
	 */
	private static final long serialVersionUID = 1219296875643602834L;

	/**
	 * Cache for the given paths.
	 */
	private Map<String, DocumentationPage> cache;

	/**
	 * The markup code generator. FIXME non static due to serialization errors?
	 */
	private static PegDownProcessor pegDownProcessor = new PegDownProcessor();

	/**
	 * Root folder where the documentation is stored.
	 */
	private File documentationRoot;

	/**
	 * Construct a documentation loader object for the given path.
	 *
	 * @param docRoot
	 *            the root directory where the documentation resides
	 * @throws IOException
	 *             if the directory does not exist
	 * @see {@link DocumentationLoader}
	 */
	public DocumentationLoader(String docRoot) {
		this.documentationRoot = new File(docRoot);
		cache = new TreeMap<>();
	}

	/**
	 * Return the generated HTML markup code that is generated by the markup
	 * file indicated by the given path.
	 *
	 * @param path
	 *            the (relative) path of the markup file in the documentation
	 *            directory.
	 *
	 * @return the generated markup HTML code
	 */
	public String generatePage(String path) {
		if (!documentationRoot.exists()) {
			return new DocumentationPage(null).load();
		}
		DocumentationPage p = cache.get(path);
		if (p == null) {
			File mdFile = new File(documentationRoot, path);
			if (!mdFile.exists()) {
				return path + " does not exist!";
			}
			p = new DocumentationPage(mdFile);
			cache.put(path, p);
		}
		return p.load();
	}

	/**
	 * Search all markdown files (those ending with '.md') in the folder
	 * specified by the constructor, create DocPage elements from then and
	 * return the list in a sorted fashion.
	 * <p>
	 * If there are no files, a singleton list will be returned with an empty
	 * documentation page object.
	 *
	 * @return a list of DocPage objects
	 */
	public synchronized List<DocumentationPage> chapters() {
		if (!documentationRoot.exists()) {
			return new LinkedList<>(
					Collections.singleton(new DocumentationPage(null)));
		}
		String[] mdFiles = documentationRoot.list(new FilenameFilter() {
			@Override
			public boolean accept(File dir, String name) {
				return name.endsWith(".md");
			}
		});
		List<DocumentationPage> chapters = new ArrayList<>(mdFiles.length);
		Arrays.sort(mdFiles);
		chapters = new ArrayList<>(mdFiles.length);
		for (String md : mdFiles) {
			chapters.add(new DocumentationPage(new File(documentationRoot, md)));
		}
		if (chapters.isEmpty()) {
			return new LinkedList<>(
					Collections.singleton(new DocumentationPage(null)));
		}
		return chapters;
	}

	/**
	 * Helper class that stores meta information about a documentation page.
	 */
	public class DocumentationPage implements Serializable {
		/**
		 *
		 */
		private static final long serialVersionUID = -4333510084884542893L;

		/**
		 * Time at which the file was last loaded.
		 */
		private long loadTime;

		/**
		 * Content of the loaded file (lazily initialized).
		 */
		private String content;

		/**
		 * The file in which the markdown code resides.
		 */
		private File markdownFile;

		/**
		 * Create a DocPage convenience class for the given markdown file.
		 * <p>
		 * If the given file is null, then an empty error DocPage object is
		 * created.
		 *
		 * @param markdownFile
		 *            the markdown file
		 */
		public DocumentationPage(File markdownFile) {
			this.markdownFile = markdownFile;
			loadTime = -1L;
			content = markdownFile == null ? "Could not find documentation."
					: null;
		}

		/**
		 * Lazily load the content of the file associated to the markdown page
		 * in the content field.
		 * <p>
		 * This method should also overwrite previously loaded content if the
		 * file has been changed.
		 *
		 * @return the HTML makrup code for the file's markdown source
		 */
		public synchronized String load() {
			if (content == null
					|| ((markdownFile != null) && markdownFile.lastModified() > loadTime)) {
				try {
					return loadContentFromFile();
				} catch (IOException e) {
					e.printStackTrace();
					return "Could not load contents from file: "
							+ markdownFile.getName();
				}
			}
			return content;
		}

		/**
		 * Load file's markdown source and return it as HTML markup code.
		 *
		 * @return the markdown source as HTML markup
		 * @throws IOException
		 */
		private String loadContentFromFile() throws IOException {
			BufferedReader br = null;
			char[] source;
			try {
				br = new BufferedReader(new FileReader(markdownFile));
				StringBuilder sb = new StringBuilder();
				String line;
				while ((line = br.readLine()) != null) {
					sb.append(line).append('\n');
				}
				source = sb.append('\n').toString().toCharArray();
			} catch (IOException e) {
				throw e;
			} finally {
				if (br != null) {
					br.close();
				}
			}
			loadTime = markdownFile.lastModified();
			return pegDownProcessor.markdownToHtml(source);
		}

		/**
		 * @return the file name as an appropriate title
		 */
		public String getTitle() {
			if (markdownFile == null) {
				return "error";
			}
			String title = markdownFile.getName();
			return title.substring(2, title.length() - 3);
		}
	}
}
